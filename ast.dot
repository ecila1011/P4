digraph AST {
1 [shape=box, label="VarDecl name='a'"];
6 [shape=box, label="Literal value=1\nreg: r0\ncode: \nloadI 1 => r0\ntype: int"];
5 [shape=box, label="Location name='a'\nreg: r2\ncode: \nloadI 1 => r0\nmultI r0, 8 => r1\nloadI 256 => r3\nloadAO [r3+r1] => r2\ntype: int"];
5 -> 6;
7 [shape=box, label="Literal value=1000\nreg: r4\ncode: \nloadI 1000 => r4\ntype: int"];
4 [shape=box, label="Assignment\ncode: \nloadI 1000 => r4\nloadI 1 => r0\nmultI r0, 8 => r5\nloadI 256 => r6\nstoreAO r4 => [r6+r5]"];
4 -> 5;
4 -> 7;
3 [shape=box, label="Block\ncode: \nloadI 1000 => r4\nloadI 1 => r0\nmultI r0, 8 => r5\nloadI 256 => r6\nstoreAO r4 => [r6+r5]\nsymbolTable: (empty)"];
3 -> 4;
2 [shape=box, label="FuncDecl name='add'\ncode: \nadd:\npush BP\ni2i SP => BP\naddI SP, 0 => SP\nloadI 1000 => r4\nloadI 1 => r0\nmultI r0, 8 => r5\nloadI 256 => r6\nstoreAO r4 => [r6+r5]\nl0:\ni2i BP => SP\npop BP\nreturn\nlocalSize: 0\nsymbolTable: (empty)"];
2 -> 3;
10 [shape=box, label="FuncCall name='add'\nreg: r7\ncode: \ncall add\naddI SP, 0 => SP\ni2i RET => r7\ntype: int"];
13 [shape=box, label="Literal value=1\nreg: r8\ncode: \nloadI 1 => r8\ntype: int"];
12 [shape=box, label="Location name='a'\nreg: r10\ncode: \nloadI 1 => r8\nmultI r8, 8 => r9\nloadI 256 => r11\nloadAO [r11+r9] => r10\ntype: int"];
12 -> 13;
11 [shape=box, label="Return\ncode: \nloadI 1 => r8\nmultI r8, 8 => r9\nloadI 256 => r11\nloadAO [r11+r9] => r10\ni2i r10 => RET"];
11 -> 12;
9 [shape=box, label="Block\ncode: \ncall add\naddI SP, 0 => SP\ni2i RET => r7\nloadI 1 => r8\nmultI r8, 8 => r9\nloadI 256 => r11\nloadAO [r11+r9] => r10\ni2i r10 => RET\nsymbolTable: (empty)"];
9 -> 10;
9 -> 11;
8 [shape=box, label="FuncDecl name='main'\ncode: \nmain:\npush BP\ni2i SP => BP\naddI SP, 0 => SP\ncall add\naddI SP, 0 => SP\ni2i RET => r7\nloadI 1 => r8\nmultI r8, 8 => r9\nloadI 256 => r11\nloadAO [r11+r9] => r10\ni2i r10 => RET\nl1:\ni2i BP => SP\npop BP\nreturn\nlocalSize: 0\nsymbolTable: (empty)"];
8 -> 9;
0 [shape=box, label="Program\ncode: (...)\nstaticSize: 40\nsymbolTable: \n  print_int : (int) -> void\n  print_bool : (bool) -> void\n  print_str : (str) -> void\n  add : () -> int\n  main : () -> int\n  a : int [5] {static offset=256}"];
0 -> 1;
0 -> 2;
0 -> 8;
}
