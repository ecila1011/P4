digraph AST {
1 [shape=box, label="VarDecl name='a'"];
2 [shape=box, label="VarDecl name='c'"];
8 [shape=box, label="Literal value=2\nreg: r0\ncode: \nloadI 2 => r0\ntype: int"];
7 [shape=box, label="UnaryOp op='-'\nreg: r1\ncode: \nloadI 2 => r0\nneg r0 => r1\ntype: int"];
7 -> 8;
6 [shape=box, label="Location name='a'\nreg: r3\ncode: \nloadI 2 => r0\nneg r0 => r1\nmultI r1, 8 => r2\nloadI 256 => r4\nloadAO [r4+r2] => r3\ntype: int"];
6 -> 7;
9 [shape=box, label="Literal value=1000\nreg: r5\ncode: \nloadI 1000 => r5\ntype: int"];
5 [shape=box, label="Assignment\ncode: \nloadI 1000 => r5\nloadI 2 => r0\nneg r0 => r1\nmultI r1, 8 => r6\nloadI 256 => r7\nstoreAO r5 => [r7+r6]"];
5 -> 6;
5 -> 9;
12 [shape=box, label="Literal value=1\nreg: r8\ncode: \nloadI 1 => r8\ntype: int"];
11 [shape=box, label="Location name='c'\nreg: r10\ncode: \nloadI 1 => r8\nmultI r8, 8 => r9\nloadI 296 => r11\nloadAO [r11+r9] => r10\ntype: int"];
11 -> 12;
14 [shape=box, label="Literal value=12\nreg: r12\ncode: \nloadI 12 => r12\ntype: int"];
17 [shape=box, label="Literal value=1\nreg: r13\ncode: \nloadI 1 => r13\ntype: int"];
19 [shape=box, label="Literal value=2\nreg: r14\ncode: \nloadI 2 => r14\ntype: int"];
18 [shape=box, label="UnaryOp op='-'\nreg: r15\ncode: \nloadI 2 => r14\nneg r14 => r15\ntype: int"];
18 -> 19;
16 [shape=box, label="BinaryOp op='*'\nreg: r16\ncode: \nloadI 1 => r13\nloadI 2 => r14\nneg r14 => r15\nmult r13, r15 => r16\ntype: int"];
16 -> 17;
16 -> 18;
15 [shape=box, label="Location name='a'\nreg: r18\ncode: \nloadI 1 => r13\nloadI 2 => r14\nneg r14 => r15\nmult r13, r15 => r16\nmultI r16, 8 => r17\nloadI 256 => r19\nloadAO [r19+r17] => r18\ntype: int"];
15 -> 16;
13 [shape=box, label="BinaryOp op='*'\nreg: r20\ncode: \nloadI 12 => r12\nloadI 1 => r13\nloadI 2 => r14\nneg r14 => r15\nmult r13, r15 => r16\nmultI r16, 8 => r17\nloadI 256 => r19\nloadAO [r19+r17] => r18\nmult r12, r18 => r20\ntype: int"];
13 -> 14;
13 -> 15;
10 [shape=box, label="Assignment\ncode: \nloadI 12 => r12\nloadI 1 => r13\nloadI 2 => r14\nneg r14 => r15\nmult r13, r15 => r16\nmultI r16, 8 => r17\nloadI 256 => r19\nloadAO [r19+r17] => r18\nmult r12, r18 => r20\nloadI 1 => r8\nmultI r8, 8 => r21\nloadI 296 => r22\nstoreAO r20 => [r22+r21]"];
10 -> 11;
10 -> 13;
22 [shape=box, label="Literal value=1\nreg: r23\ncode: \nloadI 1 => r23\ntype: int"];
21 [shape=box, label="Location name='c'\nreg: r25\ncode: \nloadI 1 => r23\nmultI r23, 8 => r24\nloadI 296 => r26\nloadAO [r26+r24] => r25\ntype: int"];
21 -> 22;
20 [shape=box, label="Return\ncode: \nloadI 1 => r23\nmultI r23, 8 => r27\nloadI 296 => r29\nloadAO [r29+r27] => r28\ni2i r28 => RET"];
20 -> 21;
4 [shape=box, label="Block\ncode: \nloadI 1000 => r5\nloadI 2 => r0\nneg r0 => r1\nmultI r1, 8 => r6\nloadI 256 => r7\nstoreAO r5 => [r7+r6]\nloadI 12 => r12\nloadI 1 => r13\nloadI 2 => r14\nneg r14 => r15\nmult r13, r15 => r16\nmultI r16, 8 => r17\nloadI 256 => r19\nloadAO [r19+r17] => r18\nmult r12, r18 => r20\nloadI 1 => r8\nmultI r8, 8 => r21\nloadI 296 => r22\nstoreAO r20 => [r22+r21]\nloadI 1 => r23\nmultI r23, 8 => r27\nloadI 296 => r29\nloadAO [r29+r27] => r28\ni2i r28 => RET\nsymbolTable: (empty)"];
4 -> 5;
4 -> 10;
4 -> 20;
3 [shape=box, label="FuncDecl name='main'\ncode: \nmain:\npush BP\ni2i SP => BP\naddI SP, 0 => SP\nloadI 1000 => r5\nloadI 2 => r0\nneg r0 => r1\nmultI r1, 8 => r6\nloadI 256 => r7\nstoreAO r5 => [r7+r6]\nloadI 12 => r12\nloadI 1 => r13\nloadI 2 => r14\nneg r14 => r15\nmult r13, r15 => r16\nmultI r16, 8 => r17\nloadI 256 => r19\nloadAO [r19+r17] => r18\nmult r12, r18 => r20\nloadI 1 => r8\nmultI r8, 8 => r21\nloadI 296 => r22\nstoreAO r20 => [r22+r21]\nloadI 1 => r23\nmultI r23, 8 => r27\nloadI 296 => r29\nloadAO [r29+r27] => r28\ni2i r28 => RET\nl0:\ni2i BP => SP\npop BP\nreturn\nlocalSize: 0\nsymbolTable: (empty)"];
3 -> 4;
0 [shape=box, label="Program\ncode: (...)\nstaticSize: 80\nsymbolTable: \n  print_int : (int) -> void\n  print_bool : (bool) -> void\n  print_str : (str) -> void\n  main : () -> int\n  a : int [5] {static offset=256}\n  c : int [5] {static offset=296}"];
0 -> 1;
0 -> 2;
0 -> 3;
}
