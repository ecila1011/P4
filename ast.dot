digraph AST {
3 [shape=box, label="VarDecl name='a'"];
5 [shape=box, label="Literal value=true\nreg: r0\ncode: \nloadI 1 => r0\ntype: bool"];
8 [shape=box, label="Location name='a'\nreg: r1\ncode: \nloadAI [BP-8] => r1\ntype: int"];
9 [shape=box, label="Literal value=1000\nreg: r2\ncode: \nloadI 1000 => r2\ntype: int"];
7 [shape=box, label="Assignment\ncode: \nloadI 1000 => r2\nstoreAI r2 => [BP-8]"];
7 -> 8;
7 -> 9;
6 [shape=box, label="Block\ncode: \nloadI 1000 => r2\nstoreAI r2 => [BP-8]\nsymbolTable: (empty)"];
6 -> 7;
12 [shape=box, label="Location name='a'\nreg: r3\ncode: \nloadAI [BP-8] => r3\ntype: int"];
13 [shape=box, label="Literal value=1\nreg: r4\ncode: \nloadI 1 => r4\ntype: int"];
11 [shape=box, label="Assignment\ncode: \nloadI 1 => r4\nstoreAI r4 => [BP-8]"];
11 -> 12;
11 -> 13;
10 [shape=box, label="Block\ncode: \nloadI 1 => r4\nstoreAI r4 => [BP-8]\nsymbolTable: (empty)"];
10 -> 11;
4 [shape=box, label="Conditional\ncode: \nloadI 1 => r0\ncbr r0 => l1, l2\nl1:\nloadI 1000 => r2\nstoreAI r2 => [BP-8]\njump l3\nl2:\nloadI 1 => r4\nstoreAI r4 => [BP-8]\nl3:"];
4 -> 5;
4 -> 6;
4 -> 10;
15 [shape=box, label="Location name='a'\nreg: r5\ncode: \nloadAI [BP-8] => r5\ntype: int"];
14 [shape=box, label="Return\ncode: \nloadAI [BP-8] => r5\ni2i r5 => RET\ni2i r5 => RET"];
14 -> 15;
2 [shape=box, label="Block\ncode: \nloadI 1 => r0\ncbr r0 => l1, l2\nl1:\nloadI 1000 => r2\nstoreAI r2 => [BP-8]\njump l3\nl2:\nloadI 1 => r4\nstoreAI r4 => [BP-8]\nl3:\nloadAI [BP-8] => r5\ni2i r5 => RET\ni2i r5 => RET\nsymbolTable: \n  a : int {stack offset=-8}"];
2 -> 3;
2 -> 4;
2 -> 14;
1 [shape=box, label="FuncDecl name='main'\ncode: \nmain:\npush BP\ni2i SP => BP\naddI SP, 0 => SP\nloadI 1 => r0\ncbr r0 => l1, l2\nl1:\nloadI 1000 => r2\nstoreAI r2 => [BP-8]\njump l3\nl2:\nloadI 1 => r4\nstoreAI r4 => [BP-8]\nl3:\nloadAI [BP-8] => r5\ni2i r5 => RET\ni2i r5 => RET\nl0:\ni2i BP => SP\npop BP\nreturn\nlocalSize: 8\nsymbolTable: (empty)"];
1 -> 2;
0 [shape=box, label="Program\ncode: (...)\nstaticSize: 0\nsymbolTable: \n  print_int : (int) -> void\n  print_bool : (bool) -> void\n  print_str : (str) -> void\n  main : () -> int"];
0 -> 1;
}
